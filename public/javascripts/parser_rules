// Sequent
SEQ 
  = ctx1:CTX_STR _ arrow:ARROW _ ctx2:CTX_STR { return "Seq (" + ctx1 + ', Con ("' + arrow + '"), ' + ctx2 + ")" }

// Context struct
CTX_STR 
  = ctx:CTX _ sep:SEP _ ctx_str:CTX_STR { return "Mult ( Con (" + sep + "), " + ctx + ", " + ctx_str + ")" }
  / ctx:CTX { return "Single (" + ctx + ")" } 

// Context
CTX 
  = ctx_lst:CTX_LST { 
    var [ctx_vars, forms] = ctx_lst
    var c = ctx_vars.join(", ")
    var f = forms.join(", ")
    return "Ctx ([" + c + "], [" + f + "])"
  }

CTX_LST
  = set:SET _ "," _ ctx_lst:CTX_LST {
      var [ctx_vars, forms] = ctx_lst
      ctx_vars.push('CtxVar ("' + set + '")')
      return [ctx_vars, forms]
    }
  / form:FORM _ "," _ ctx_lst:CTX_LST _ { 
      var [ctx_vars, forms] = ctx_lst
      forms.push(form)
      return [ctx_vars, forms]
    }
  / set:SET { return [['CtxVar ("' + set + '")'], []] } 
  / form:FORM { return [[], [form]] } 

// Formula (only unary and binary connectives supported so far)
FORM
  = "(" _ form:FORM _ ")" { return form }
  / form_var:FORM_VAR _ conn:CONN _ form2:FORM { return "Form (" + conn + ", [" + form_var + "," + form2 + "])" }
  / atom_var:ATOM_VAR _ conn:CONN _ form2:FORM { return "Form (" + conn + ", [" + atom_var + "," + form2 + "])" }
  / conn:CONN _ form:FORM { return "Form (" + conn + ", [" + form + "])" }
  / form_var:FORM_VAR { return form_var }
  / atom_var:ATOM_VAR { return atom_var }

// Symbols
CONN = conn:Conn { return 'Con ("' + conn  + '")' }
FORM_VAR = form_var:FormVar { return 'FormVar ("' + form_var + '")' }
ATOM_VAR = atom_var:AtomVar { return 'AtomVar ("' + atom_var + '")' }

_ "whitespace"
  = [ ]*

ARROW = "=>"
SEP = ";"
Conn = "^" / "v" /  "~"
SET = "Gamma" / "Delta" / "random"
FormVar = "F"
AtomVar = "A" / "B" / "C" / "D"

